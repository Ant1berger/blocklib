/*!************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./src/knob/index.css ***!
  \************************************************************************************************************************************************************************/
.knob {
    font-family: var(--fontFamily);
    font-size: var(--size);
    text-align: center;
    text-decoration: none;
    display: inline-flex;
    color: var(--color);
    background-color: var(--bgColor);
    border-style: solid;
    border-color: var(--borderColor);
    border-width: .1em;
    border-radius: .4em;
    padding-inline: 1em;
    padding-block: .5em;
    gap: .5em;
    line-height: 1.5;
    cursor: pointer;
    -webkit-tap-highlight-color: transparent;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
}

.knob.-rounded {
    border-radius: 1.3333em;
}

.knob.-inverted {
    background-color: transparent;
    color: var(--borderColor);
}

/* Icons come from Google Fonts: */
/* https://fonts.google.com/icons?icon.size=24&icon.color=%235f6368 */
/* Used as inline SVGs to allow CSS control on their attributes (e.g. fill). */
.knob.-leftIcon {
    text-align: start;
}

.knob.-leftIcon svg {
    inline-size: 1.5em;
    block-size: 1.5em;
    fill: currentcolor;
    flex-shrink: 0;
}

.knob.-invisibleText {
    padding-inline: .5em;
}

.knob.-invisibleText .knob-text {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
}

.knob.-fullWidth {
    inline-size: -webkit-fill-available;
    inline-size: -moz-available;
    justify-content: center;
}

/* Hover and focused states */

@media(prefers-reduced-motion: no-preference) {

    .knob.-hoverOutlined {
        transition: outline-color .2s;
    }
}

.knob.-hoverOutlined {
    outline-color: oklch(from var(--borderColor) l c h / 0%);
    outline-width: .3rem;
    outline-offset: .2rem;
    outline-style: solid;
}

.knob.-hoverOutlined:hover,
.knob.-hoverOutlined:focus-visible {
    outline-color: oklch(from var(--borderColor) l c h / 100%);
}

@media(prefers-reduced-motion: no-preference) {

    .knob.-hoverBGDarken,
    .knob.-hoverBGLighten {
        transition: background-color .2s;
    }
}

.knob.-hoverBGDarken,
.knob.-hoverBGLighten {
    outline: none;
}

/* Have to ask for a result in HSL to get a constant lightening (or darkening) while keeping the same hue */
.knob.-hoverBGDarken:hover,
.knob.-hoverBGDarken:focus-visible {
    background-color: color-mix(in hsl, var(--bgColor) 100%, #000000 30%);
}

.knob.-hoverBGLighten:hover,
.knob.-hoverBGLighten:focus-visible {
    background-color: color-mix(in hsl, var(--bgColor) 100%, #ffffff 10%);
}

@media(prefers-reduced-motion: no-preference) {

    .knob.-hoverUnstuck {
        transition: scale .2s, box-shadow .2s;
    }
}

.knob.-hoverUnstuck {
    scale: 1;
    box-shadow: none;
}

.knob.-hoverUnstuck:hover,
.knob.-hoverUnstuck:focus-visible {
    scale: 1.05;
    box-shadow: 0 0.2em 0.5em oklch(from var(--grey_start) l c h / 40%);
}

@media(prefers-reduced-motion: no-preference) {

    .knob.-hoverInverted {
        transition: background-color .2s, color .2s, color .2s;

        &.-leftIcon svg {
            transition: fill .2s;
        }
    }
}

.knob.-hoverInverted:hover,
.knob.-hoverInverted:focus-visible {
    background-color: transparent;
    color: var(--borderColor);
}

.knob.-inverted.-hoverInverted:hover,
.knob.-inverted.-hoverInverted:focus-visible {
    background-color: var(--bgColor);
    color: var(--color);
}

