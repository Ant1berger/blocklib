/*!*******************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./src/knob-glossy/index.css ***!
  \*******************************************************************************************************************************************************************************/
.knob-glossy {
    font-family: var(--fontFamily);
    font-size: var(--size);
    text-align: center;
    text-decoration: none;
    display: inline-flex;
    color: var(--color);
    background-color: var(--bgColor);
    border-style: solid;
    border-color: var(--borderColor);
    border-width: .1em;
    border-radius: 100em; /* Always rounded */
    padding-inline: 1em;
    padding-block: .5em;
    gap: .2em;
    line-height: 1.3;
    cursor: pointer;
    -webkit-tap-highlight-color: transparent;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    background-image: linear-gradient(hsla(0, 0%, 0%, 0.7), transparent);
    position: relative;
    box-shadow: 0 .1em .2em .1em oklch(from var(--grey_start) l c h / 20%);

    &::before {
        content: "";
        position: absolute;
        top: .1em;
        left: .5em;
        right: .5em;
        bottom: 1em;
        border-radius: 100em;
        background-image: linear-gradient(hsla(0, 0%, 100%, 0.9), transparent);
    }
}

/* Icons come from Google Fonts: */
/* https://fonts.google.com/icons?icon.size=24&icon.color=%235f6368 */
/* Used as inline SVGs to allow CSS control on their sub-elements (e.g. fill). */
.knob-glossy.-leftIcon {
    text-align: start;
}

.knob-glossy.-leftIcon svg {
    inline-size: 1.3em;
    block-size: 1.3em;
    fill: var(--color);
    flex-shrink: 0;
}

.knob-glossy.-invisibleText {
    padding-inline: .5em;
}

.knob-glossy.-invisibleText .knob-glossy-text {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
}

.knob-glossy.-fullWidth {
    inline-size: -webkit-fill-available;
    inline-size: -moz-available;
    justify-content: center;
}

/* Hover and focused states */

@media(prefers-reduced-motion: no-preference) {

    .knob-glossy.-hoverBGLighten {
        transition: background-color .2s;
    }
}

.knob-glossy.-hoverBGLighten {
    outline: none;
}

/* Have to ask for a result in HSL to get a constant lightening (or darkening) while keeping the same hue */
.knob-glossy.-hoverBGLighten:hover,
.knob-glossy.-hoverBGLighten:focus-visible {
    background-color: color-mix(in hsl, var(--bgColor) 100%, #ffffff 20%);
    background-image: linear-gradient(hsla(0, 0%, 0%, 0.5), transparent);

    &::before {
        background-image: linear-gradient(hsla(0, 0%, 100%, 1), transparent);
    }
}


/*# sourceMappingURL=index.css.map*/